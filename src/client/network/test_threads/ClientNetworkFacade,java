package client.network.test_threads;

import client.commandprocessor.ClientCommandSender;

import java.io.*;

//Синглтоне фасад
// Создает потоки подключения к серверу и завершает старый при создании нового

public class ClientNetworkFacade {

    private static ClientNetworkFacade instance;
    private ConnectionThread connectioThread;

    public static ClientNetworkFacade getInstance() {
        if (instance == null) instance = new ClientNetworkFacade();
        return instance;
    }
 //вызывается для завершения соединения и остановки потока подключения
    public void finish() {

        if (this.connectioThread.getDataOutputStream() != null) {
            ClientCommandSender.getInstance().sendDisconnectCommand(this.connectioThread.getDataOutputStream());
            this.connectioThread.finish();
            this.connectioThread.interrupt();
        } else {
            this.connectioThread.interrupt();
        }
    }


    public void connection() {
        ///тип тут потоки для подключения
        if (this.connectioThread != null) {
           //тут команду на дисконект серверу не нужно при создании новых потоков если старый уже => серв был офлайн
            this.connectioThread.interrupt();
        }
        this.connectioThread = new ConnectionThread();
        this.connectioThread.start();
        this.connectioThread.connect();

    }

    public int getNotificationPort() {
        return this.connectioThread.getNotificationPort();
    }

    public DataOutputStream getDataOutputStream() {
        return this.connectioThread.getDataOutputStream();

    }

    public DataOutputStream getNotificationOutputStream() {
        return this.connectioThread.getNotificationOutputStream();
    }


}



